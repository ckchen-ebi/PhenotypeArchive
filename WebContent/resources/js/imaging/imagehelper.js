/**
 * Copyright Â© 2011-2013 EMBL - European Bioinformatics Institute
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.  
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * imagehelper: functions shared between image widgets
 * 
 */
//functions shared between image widgets

//write a row for out table usually one name and one value two td tags
function tableRow(name, value){
		var text='<tr><td>'+name+'</td><td>'
		+ value + '</td></tr>';
		return text;
	}

function writeExperiment(image_rec){
	if(image_rec.imaSubcontext.imaExperimentDict.name){
	return tableRow('Experiment:', image_rec.imaSubcontext.imaExperimentDict.name);
	}
}

function getTagsText(image_rec){
	var tagText='';
	for ( var j = 0; j < image_rec.imaImageTags.length; j++) {
		var imageTag = image_rec.imaImageTags[j];

//		tagText += '<tr><td>Tag Edited by:</td><td>'
//				+ imageTag.editedBy + '</td></tr>';
//		console.debug(imageTag.editedBy);
//		tagText += '<tr><td>Tag Edit Date:</td><td>'
//				+ imageTag.editDate + '</td></tr>';
		tagText += '<tr><td>Tag Name:</td><td>'
			+ imageTag.tagName + '</td></tr>';
		tagText += '<tr><td>Tag Value:</td><td>'
			+ imageTag.tagValue + '</td></tr>';
		tagText+=getAnnotationsText(imageTag);
	}
	return tagText;
}

//write a table of data from the image record generated by the rest service
function writeImageRecordTable(image_rec) {

						// var imageLink = rootImagePath +
						// image_rec.largeThumbnailFilePath;
						// lets link to the large image version
						// of this which uses the same web
						// service but we will use another
						// request
						// if we use in the same page I guess we
						// can just pass it the json.

						var imageText = '<table><tr>';
						//imageText+=getTagsText(image_rec);
						//imageText+=writeExperiment(image_rec);
						//imageText += '<tr><td>Image Id:</td><td>'
						//		+ image_rec.id + '</td></tr>';
						if(image_rec.imaMouseImageVw){
						imageText += '<tr><td>Genotype:</td><td>'
							+ image_rec.imaMouseImageVw.genotype + '</td></tr>';
						imageText += '<tr><td>Sex:</td><td>'
							+ image_rec.imaMouseImageVw.gender + '</td></tr>';
						imageText += '<tr><td>Age (wks):</td><td>'
							+ image_rec.imaMouseImageVw.ageInWeeks + '</td></tr>';
						}
						
						// loop through the tags
						
						
						imageText += '</table>';
						
						return imageText;
}

//assumes the response has a start, length and total
function getRangeText(response){
	var start=response.start+1;//to correct for 0 start
	var length=response.length;
	var total=response.total;
	var end=response.start+length;	
	return ' Range: '+start +'-'+ end+' of '+total;		
}

function getPaginationText(response, url){
	var start=response.start+1;//to correct for 0 start
	var length=response.length;
	var total=response.total;
	var end=response.start+length;
	
	var paginationText='';

	paginationText+= '<ul>';
	
	//enable/disable previous button
	if(start==1){
		paginationText+=    '<li class="disabled"><a >Prev</a></li>';
	}else{
		var prevUrl=modifyParam('start',start-11);
	paginationText+=    '<li><a href="'+prevUrl+'">Prev</a></li>';
	}
	
	//draw all buttons
	for(var i=0;i<total; i+=10){
		var newUrl=modifyParam('start', i);
		var label=i;
		var liClass='';
		if(label==start-1){
			liClass='active';
			
		}
		paginationText+=   '<li class="'+liClass+'"><a href="'+newUrl+'">'+label+'</a></li>';
	}
	
	//enable/disable next button
	if((start+10)>=total){
		paginationText+=  '<li class="disabled"><a>Next</a></li>';
	}else{
		var nextUrl=modifyParam('start',start+9);
		paginationText+=  '<li><a href="'+nextUrl+'">Next</a></li>';
	}
	
	paginationText+='</ul>';
	
	return paginationText;	
}

function getShowAllLink(response, linkToPage){
	var total=response.total;
	var linkText='<a href="'+linkToPage+'&length='+total+'">Show All Images</a>';
	return linkText;
	
}

function getAnnotationsText(imageTag){
	var annText='';
	
	if(imageTag.annAnnotations){
	for ( var k = 0; k < imageTag.annAnnotations.length; k++) {
		var imageAnn = imageTag.annAnnotations[k];

		annText += '<tr><td>Term Id:</td><td>'
				+ imageAnn.termId + '</td></tr>';
		annText += tableRow('Term Name:',imageAnn.termName);
		if(imageAnn.annOntologyDict){
			var ontDict=imageAnn.annOntologyDict;
			annText+=tableRow('Term Description', ontDict.description);
			
		}
	}
}
	return annText;
}

//look for an image record in a list with the imageId
function getImageRecordWithId(imageId, imageRecords){
	for(var rec=0; rec<imageRecords.length; rec++){
		var imageRec=imageRecords[rec];
		var id=imageRec.id;
		if(id==imageId){
			return imageRec;
		}
	}
	
	
}

function getLargeImageUrlForImageId(image_id, image_records, rootImagePath){
	var image_r=getImageRecordWithId(image_id, image_records);
	var imageLink = rootImagePath
	+ image_r.largeThumbnailFilePath;
	return imageLink;
}


function modifyParam(param, newValue){
	var url = document.URL;
	var newAdditionalURL = "";
	var tempArray = url.split("?");
	var baseURL = tempArray[0];
	var aditionalURL = tempArray[1]; 
	var temp = "";
	if(aditionalURL)
	{
	var tempArray = aditionalURL.split("&");
	for ( var i in tempArray ){
	    if(tempArray[i].indexOf(param) == -1){
	            newAdditionalURL += temp+tempArray[i];
	                temp = "&";
	            }
	        }
	}
	var rows_txt = temp+param+"="+newValue;
	var finalURL = baseURL+"?"+newAdditionalURL+rows_txt;
	return finalURL;
}
